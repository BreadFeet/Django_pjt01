"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-py9aw)*ai2&1*@1443t0f-tw#n1r(2*@u0g_i)20r*cst4z9!o'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'pjt01',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]    # Django에서 지정된 이름

DATA_DIR = [os.path.join(BASE_DIR, 'data')]  # 내가 임의로 지정하고 import로 사용하는 경로

LOG_FILE = os.path.join(BASE_DIR, 'data/mylog.csv')        # logging에서 log 저장할 파일 경로

LOGGING = {
            'version': 1,

            # 기존의 로깅 설정을 비활성화 할 것인가?
            'disable_existing_loggers': False,

            # 포맷터
            # 로그기록은 최종적으로 텍스트로 표현됨 -> 이 텍스트의 포맷 형식 정의
            # 여러 포맷 정의 가능
            'formatters': {
                    'format1': {     # asctime: 사람이 읽을 수 있는 형태의 datetime
                                     # name: logger 이름
                                     # lineno: views.py에서 logger 작동한 줄 번호
                            'format': '[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s',
                            'datefmt': '%d/%b/%Y %H:%M:%S'
                    },
                    'format2': {
                            'format': '%(levelname)s %(message)s'
                    },
                    'format3': {
                            'format': '%(asctime)s, 메세지: %(message)s',   # 한 문자열이어야 함
                            'datefmt': '%Y-%m-%d-%H-%M-%S'
                    }
            },

            # 핸들러
            # 로그 레코드로 무슨 작업을 할 것인지 정의
            # 여러 핸들러 정의 가능
            'handlers': {
                            # 로그 파일을 만들어 텍스트로 로그기록 저장
                            'file': {
                                        'level': 'DEBUG',
                                        'class': 'logging.FileHandler',
                                        'filename': LOG_FILE,     # 위에서 정의한 로그 파일
                                        'formatter': 'format3',   # 파일에 적용할 포맷을 위에서 가져옴
                            },

                            # 콘솔(터미널)에 출력
                            'console': {
                                            'level': 'DEBUG',
                                            'class': 'logging.StreamHandler',
                                            'formatter': 'format3',
                            }
                         },

            # 로거
            # 로그 레코드 저장소
            # 로거를 이름별로 정의
            'loggers': {
                        'users': {
                            'handlers': ['file'],      # 파일에만 찍힘. 값이 하나여도 꼭 [] 안에 써야함!
                            'level': 'CRITICAL',
                        },
                        'items': {
                            'handlers': ['console'],    # 콘솔에만 찍힘
                            'level': 'DEBUG',
                        },
                        'iot_file': {
                            'handlers': ['file', 'console'],    # 똑같은 내용을 파일, 콘솔에 찍음
                            'level': 'DEBUG'
                        }
            }
}


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
